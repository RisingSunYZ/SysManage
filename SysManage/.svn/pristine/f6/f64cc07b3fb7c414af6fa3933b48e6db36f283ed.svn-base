package com.hfmx.control.upload;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadBase.SizeLimitExceededException;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import com.hfmx.control.base.BaseController;
import com.hfmx.fileupload.MXProgressEntity;
import com.hfmx.fileupload.MXProgressListener;
import com.hfmx.utils.AjaxMsg;

@Controller
@Scope("prototype")
@RequestMapping("/upload")
public class UploadControl extends BaseController {
	/** 临时保存路径 **/
	private static final String UPLOADDIR = "file/";

	@RequestMapping(value = "/upfile.do")
	public void upfile(HttpServletRequest request, HttpServletResponse response) {
		// 主路径
		String context = request.getSession().getServletContext().getRealPath("/");
		// 临时缓存目录
		File tempDir = new File(context + UploadControl.UPLOADDIR + "template/");
		if (!tempDir.exists()) {
			tempDir.mkdirs();
		}
		// 文件保存路径
		String uploadDir = context + UploadControl.UPLOADDIR + DateFormatUtils.format(new Date(), "yyyyMM") + "/";

		try {
			// 判断是否是上传表单
			if (ServletFileUpload.isMultipartContent(request)) {
				/**
				 * DiskFileItemFactory创建FileItem实例，并保存其内容在内存或者硬盘中，
				 * 通过一个阀值来决定这个FileItem 实例是存放在内存或者硬盘中
				 */
				DiskFileItemFactory factory = new DiskFileItemFactory();
				/**
				 * 设置阀值，大小不设置的话，默认10k，超过这个阀值，FileItem将直接写入到磁盘
				 */
				factory.setSizeThreshold(1024 * 10);
				/**
				 * 设置临时文件夹，默认为系统默认Temp文件路径，调用System.getProperty("java.io.tmpdir"
				 * ) 获取，超过阀值的FileItem实例将存放在这个目录中
				 */
				factory.setRepository(tempDir);
				// 构造servletFileUpload
				// 的实例，该实例提供工厂模式创建FileItem的DiskFileItemFactory实例
				ServletFileUpload fileUpload = new ServletFileUpload(factory);
				// 设置一个完整的请求允许的最大大小(注意是完整请求，包括非file类型的表单,比如Text类型)
				fileUpload.setSizeMax(1024 * 1024 * 100);
				fileUpload.setHeaderEncoding("UTF-8");
				fileUpload.setProgressListener(new MXProgressListener(request.getSession()));
				List<FileItem> items = fileUpload.parseRequest(request);
				for (FileItem item : items) {
					// 判断是否是非表单数据
					if (!item.isFormField()) {
						savefile(item, uploadDir);
					}
				}
			}
			this.writeJson(response, new AjaxMsg(false, "", null));
		} catch (FileUploadException e) {
			if (e instanceof SizeLimitExceededException)
				this.writeJson(response, new AjaxMsg(false, "上传文件太大！", null));
			else
				this.writeJson(response, new AjaxMsg(false, "上传文件发生错误！", null));
		} catch (Exception e) {
			this.writeJson(response, new AjaxMsg(false, "上传失败！", null));
		}
	}

	public void savefile(FileItem item, String uploadDir) {
		if (StringUtils.isNotBlank(uploadDir)) {
			File filedir = new File(uploadDir);
			if (!filedir.exists()) {
				// 创建文件夹要用 file.mkdirs(),不能用 file.mkdir(),否则在linux下运行失败
				filedir.mkdirs();
			}
			// 获得上传文件的文件名
			String fileName = item.getName().substring(item.getName().lastIndexOf("\\") + 1);
			String fileid = UUID.randomUUID().toString();
			String newfilename = fileid + fileName.substring(fileName.lastIndexOf("."));// 新文件名
			String path = uploadDir + newfilename;
			File uploadFile = new File(path);
			InputStream in;
			try {
				in = item.getInputStream();// 获得输入数据流文件
				// 将该数据流写入到指定文件中
				FileOutputStream out = new FileOutputStream(uploadFile);
				byte[] buffer = new byte[4096];
				int bytes_read;
				while ((bytes_read = in.read(buffer)) != -1) {
					out.write(buffer, 0, bytes_read);
				}
				if (in != null)
					in.close();
				if (out != null)
					out.close();
			} catch (IOException e1) {
				// e1.printStackTrace();
			}
		}
	}

	@RequestMapping(value = "/progress.do")
	public void progress(HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		MXProgressEntity ps = null;
		if (session.getAttribute("upload_ps") != null)
			ps = (MXProgressEntity) session.getAttribute("upload_ps");
		this.writeJson(response, ps);
	}
}
