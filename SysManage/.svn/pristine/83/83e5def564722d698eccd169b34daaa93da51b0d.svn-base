package com.hfmx.control.book;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hfmx.bean.AjaxMsg;
import com.hfmx.control.base.BaseController;
import com.hfmx.formmodel.FBook;
import com.hfmx.model.TBook;
import com.hfmx.pagemodel.PBook;
import com.hfmx.pagemodel.DataGrid;
import com.hfmx.pagemodel.PageInfo;
import com.hfmx.pagemodel.SearchInfo;
import com.hfmx.service.book.IBookService;

@Controller
@Scope("prototype")
@RequestMapping("/book")
public class BookControl extends BaseController {
	@Autowired
	public IBookService bookService;

	@RequestMapping(value = "/list.do")
	public String list() {
		return "book/list";
	}

	@RequestMapping(value = "/forwardadd.do")
	public String forwardadd() {
		return "book/add";
	}

	@RequestMapping(value = "/forwardedit/{id}.do")
	public String forwardedit(HttpServletRequest request,
			@PathVariable("id") int id) {
		FBook bookForm = new FBook(bookService.search(TBook.class,
				id));
		if (bookForm.getId() != null && !"".equals(bookForm.getId().trim())) {
			request.setAttribute("book", bookForm);
			request.setAttribute("AjaxMsg", new AjaxMsg(true, ""));
		} else {
			request.setAttribute("book", null);
			request.setAttribute("AjaxMsg", new AjaxMsg(false, "修改的图书不存在！"));
		}
		return "book/edit";
	}

	@RequestMapping(value = "/show/{id}.do")
	public String show(HttpServletRequest request, @PathVariable("id") int id) {
		FBook bookForm = new FBook(bookService.search(TBook.class,
				id));
		if (bookForm.getId() != null && !"".equals(bookForm.getId().trim())) {
			request.setAttribute("book", bookForm);
			request.setAttribute("AjaxMsg", new AjaxMsg(true, ""));
		} else {
			request.setAttribute("book", null);
			request.setAttribute("AjaxMsg", new AjaxMsg(false, "查看的图书不存在！"));
		}
		return "book/show";
	}

	@RequestMapping(value = "/grid.do")
	@ResponseBody
	public DataGrid<PBook> listgrid(String queryjson, PageInfo pageInfo) {
		SearchInfo searchinfo = new SearchInfo(this.getMapFromJson(queryjson));
		return bookService.getlist("", searchinfo, pageInfo);
	}

	@RequestMapping(value = "/cmb.do")
	@ResponseBody
	public List<TBook> cmb() {
		return bookService.search(TBook.class, "select * from book");
		// return bookService.search("from Book", null);
	}

	@RequestMapping(value = "/add.do")
	@ResponseBody
	public AjaxMsg add(@ModelAttribute("bookform") FBook bookform) {
		if (bookform != null) {
			TBook book = bookform.getBook(new TBook());
			bookService.save(book);
			return new AjaxMsg(true, "添加成功！");
		}
		return new AjaxMsg(false, "添加失败！");
	}

	@RequestMapping(value = "/edit.do")
	@ResponseBody
	public AjaxMsg edit(@ModelAttribute("bookform") FBook bookform) {
		if (bookform != null && bookform.getId() != null
				&& !"".equals(bookform.getId().trim())) {
			TBook book = bookService.search(TBook.class,
					Integer.valueOf(bookform.getId()));
			if (book != null) {
				book = bookform.getBook(book);
				bookService.update(book);
				return new AjaxMsg(true, "修改成功！");
			} else
				return new AjaxMsg(false, "选择的记录不存在！");
		}
		return new AjaxMsg(false, "请选择一条记录！");
	}

	@RequestMapping(value = "/delete/{ids}.do")
	@ResponseBody
	public AjaxMsg delete(@PathVariable("ids") String ids) {
		if (ids != null && !"".equals(ids.trim())) {
			String[] idsString = ids.split(",");
			Integer[] idlist = new Integer[idsString.length];
			for (int i = 0; i < idsString.length; i++) {
				idlist[i] = Integer.parseInt(idsString[i]);
			}
			bookService.delete(TBook.class, idlist);
			return new AjaxMsg(true, "删除成功！");
		}
		return new AjaxMsg(false, "请选择需要删除的记录！");
	}
}
