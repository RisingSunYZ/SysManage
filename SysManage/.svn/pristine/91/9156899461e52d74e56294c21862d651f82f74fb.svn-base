package com.hfmx.service.book.impl;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.hfmx.dao.book.IBookDao;
import com.hfmx.dao.book.IBookModelDao;
import com.hfmx.exception.BusinessException;
import com.hfmx.formmodel.FBook;
import com.hfmx.model.TBook;
import com.hfmx.service.book.IBookManageService;
import com.hfmx.utils.AjaxMsg;

@Service("bookManage")
public class BookManageServiceImpl implements IBookManageService {
	@Resource(name = "bookDao")
	private IBookDao dao;
	@Resource(name = "bookModelDao")
	private IBookModelDao modeldao;
	private Logger logger = Logger.getLogger(BookManageServiceImpl.class);

	/**
	 * 添加
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false, rollbackFor = BusinessException.class)
	public AjaxMsg add(FBook f) throws Exception {
		if (f != null) {
			TBook tmodel = f.fillTmodel(new TBook(), modeldao);
			try {
				dao.save(tmodel);
				return new AjaxMsg(true, "添加成功！");
			} catch (Exception e) {
				logger.warn("添加记录失败！");
				throw new BusinessException("添加记录出错！", e);
			}
		} else
			return new AjaxMsg(false, "添加数据未获取到！");
	}

	/**
	 * 修改
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false, rollbackFor = BusinessException.class)
	public AjaxMsg update(FBook f) throws Exception {
		if (f != null) {
			if (StringUtils.isNotBlank(f.getId())) {
				TBook tmodel = this.find(Integer.valueOf(f.getId()));
				if (tmodel != null) {
					tmodel = f.fillTmodel(tmodel, modeldao);
					try {
						dao.update(tmodel);
						return new AjaxMsg(true, "修改成功！");
					} catch (Exception e) {
						logger.warn("修改记录失败！");
						throw new BusinessException("修改记录出错！", e);
					}
				} else
					return new AjaxMsg(false, "选择的记录不存在！");
			} else
				return new AjaxMsg(false, "请选择一条需要修改的记录！");
		} else
			return new AjaxMsg(false, "修改数据未获取到！");
	}

	/**
	 * 删除
	 */
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false, rollbackFor = BusinessException.class)
	public AjaxMsg delete(String ids) throws Exception {
		if (StringUtils.isNotBlank(ids)) {
			String[] idsString = ids.split(",");
			Integer[] idlist = new Integer[idsString.length];
			for (int i = 0; i < idsString.length; i++) {
				idlist[i] = Integer.parseInt(idsString[i].trim());
			}
			try {
				dao.delete(TBook.class, idlist);
				return new AjaxMsg(true, "删除成功！");
			} catch (Exception e) {
				logger.warn("删除记录失败！");
				throw new BusinessException("删除记录出错！", e);
			}
		} else
			return new AjaxMsg(false, "请选择需要删除的记录！");
	}

	/**
	 * 获取实体类
	 */
	public TBook find(int id) throws Exception {
		try {
			return dao.search(TBook.class, id);
		} catch (Exception e) {
			throw new BusinessException("找不到该记录！", e);
		}
	}

	/**
	 * 获取fmodel
	 * 
	 * @throws Exception
	 */
	public FBook findForm(int id) throws Exception {
		TBook tmodel = this.find(id);
		if (tmodel != null)
			return new FBook(tmodel);
		else
			return null;
	}
}
