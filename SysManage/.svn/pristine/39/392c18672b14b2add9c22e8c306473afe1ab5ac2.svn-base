package com.hfmx.control.upload;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadBase.SizeLimitExceededException;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.hfmx.control.base.BaseController;
import com.hfmx.fileupload.MXProgressEntity;
import com.hfmx.fileupload.MXProgressListener;
import com.hfmx.utils.AjaxMsg;

@Controller
@Scope("prototype")
@RequestMapping("/upload")
public class UploadControl extends BaseController {
	/** 临时保存路径 **/
	private static final String UPLOADDIR = "file/";

	@RequestMapping(value = "/upfile.do")
	public void upfile(HttpServletRequest request, HttpServletResponse response) {
		// 主路径
		String context = request.getSession().getServletContext().getRealPath("/");
		// 临时缓存目录
		File tempDir = new File(context + UploadControl.UPLOADDIR + "template/");
		if (!tempDir.exists())
			tempDir.mkdirs();
		// 文件保存路径
		String uploadDir = context + UploadControl.UPLOADDIR + DateFormatUtils.format(new Date(), "yyyyMM") + "/";
		try {
			// 判断是否是上传表单
			if (ServletFileUpload.isMultipartContent(request)) {
				// DiskFileItemFactory创建FileItem实例，通过一个阀值来决定存放在内存或者硬盘中
				DiskFileItemFactory factory = new DiskFileItemFactory();
				// 设置阀值，默认10k，超过这个阀值，FileItem将直接写入到factory设置的临时文件夹
				factory.setSizeThreshold(1024 * 100);
				// 设置临时文件夹，默认为系统Temp文件路径，获取调用System.getProperty("java.io.tmpdir")
				factory.setRepository(tempDir);
				// ServletFileUpload提供创建FileItem的工厂模式DiskFileItemFactory实例
				ServletFileUpload fileUpload = new ServletFileUpload(factory);
				// 设置一个完整的请求允许的最大大小(注意是完整请求，包括非file类型的表单input)
				fileUpload.setSizeMax(1024 * 1024 * 100);
				fileUpload.setHeaderEncoding("UTF-8");
				fileUpload.setProgressListener(new MXProgressListener(request.getSession()));
				List<FileItem> items = fileUpload.parseRequest(request);
				// 是否将文件保存入数据库
				boolean save = true;
				// 文件信息
				Map<String, String> result = null;
				// 先获取表单元素
				for (FileItem item : items) {
					if (item.isFormField()) {
						String name = item.getFieldName();
						String value = item.getString("UTF-8");
						if (name.equals("save")) {
							if (StringUtils.isNotBlank(value))
								save = Boolean.valueOf(value);
							continue;
						}
					}
				}
				// 再获取文件
				for (FileItem item : items) {
					if (!item.isFormField())
						result = savefile(item, uploadDir, save);
				}
				this.writeJson(response, new AjaxMsg(true, "上传成功!", result));
			} else
				this.writeJson(response, new AjaxMsg(false, "请设置表单的enctype属性为multipart/form-data!", null));
		} catch (FileUploadException e) {
			String msg = e instanceof SizeLimitExceededException ? "上传文件太大！" : "上传文件发生错误！";
			this.writeJson(response, new AjaxMsg(false, msg, null));
		} catch (Exception e) {
			this.writeJson(response, new AjaxMsg(false, "上传失败！", null));
		}
	}

	/**
	 * 保存文件
	 * 
	 * @param item
	 * @param uploadDir
	 */
	public Map<String, String> savefile(FileItem item, String uploadDir, boolean save) {
		if (StringUtils.isBlank(uploadDir))
			return null;
		try {
			Map<String, String> result = new HashMap<String, String>();
			File filedir = new File(uploadDir);
			if (!filedir.exists()) {
				// 创建文件夹要用 file.mkdirs(),不能用 file.mkdir(),否则在linux下运行失败
				filedir.mkdirs();
			}
			// 获得上传文件的文件名
			String fileName = item.getName().substring(item.getName().lastIndexOf("\\") + 1);
			String fileid = UUID.randomUUID().toString();
			String newfilename = fileid + fileName.substring(fileName.lastIndexOf("."));// 新文件名
			String path = uploadDir + newfilename;
			File uploadFile = new File(path);
			InputStream in = item.getInputStream();// 获得输入数据流文件
			// 将该数据流写入到指定文件中
			FileOutputStream out = new FileOutputStream(uploadFile);
			byte[] buffer = new byte[4096];
			int bytes_read;
			while ((bytes_read = in.read(buffer)) != -1) {
				out.write(buffer, 0, bytes_read);
			}
			if (in != null)
				in.close();
			if (out != null)
				out.close();
			// 存入数据库
			if (save) {

			}
			result.put("fileid", fileid);
			result.put("path", path);
			return result;
		} catch (IOException e1) {
			// e1.printStackTrace();
			return null;
		}
	}

	@RequestMapping(value = "/progress.do")
	public void progress(HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		MXProgressEntity ps = null;
		if (session.getAttribute("upload_ps") != null)
			ps = (MXProgressEntity) session.getAttribute("upload_ps");
		this.writeJson(response, ps);
	}
}
